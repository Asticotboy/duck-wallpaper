{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/cludw/Documents/Programmation/node/duck-wallpaper/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { toArray } from './util';\nimport { shouldEmbed, embedResources } from './embedResources';\nvar cssFetchCache = {};\n\nfunction fetchCSS(url) {\n  var cache = cssFetchCache[url];\n\n  if (cache != null) {\n    return cache;\n  }\n\n  var deferred = window.fetch(url).then(function (res) {\n    return {\n      url: url,\n      cssText: res.text()\n    };\n  });\n  cssFetchCache[url] = deferred;\n  return deferred;\n}\n\nfunction embedFonts(meta) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", meta.cssText.then(function (raw) {\n              var cssText = raw;\n              var regexUrl = /url\\([\"']?([^\"')]+)[\"']?\\)/g;\n              var fontLocs = cssText.match(/url\\([^)]+\\)/g) || [];\n              var loadFonts = fontLocs.map(function (location) {\n                var url = location.replace(regexUrl, '$1');\n\n                if (!url.startsWith('https://')) {\n                  url = new URL(url, meta.url).href;\n                } // eslint-disable-next-line promise/no-nesting\n\n\n                return window.fetch(url).then(function (res) {\n                  return res.blob();\n                }).then(function (blob) {\n                  return new Promise(function (resolve, reject) {\n                    var reader = new FileReader();\n\n                    reader.onloadend = function () {\n                      // Side Effect\n                      cssText = cssText.replace(location, \"url(\".concat(reader.result, \")\"));\n                      resolve([location, reader.result]);\n                    };\n\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                  });\n                });\n              }); // eslint-disable-next-line promise/no-nesting\n\n              return Promise.all(loadFonts).then(function () {\n                return cssText;\n              });\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nfunction parseCSS(source) {\n  if (source == null) {\n    return [];\n  }\n\n  var result = [];\n  var commentsRegex = /(\\/\\*[\\s\\S]*?\\*\\/)/gi; // strip out comments\n\n  var cssText = source.replace(commentsRegex, '');\n  var keyframesRegex = new RegExp('((@.*?keyframes [\\\\s\\\\S]*?){([\\\\s\\\\S]*?}\\\\s*?)})', 'gi'); // eslint-disable-next-line no-constant-condition\n\n  while (true) {\n    var matches = keyframesRegex.exec(cssText);\n\n    if (matches === null) {\n      break;\n    }\n\n    result.push(matches[0]);\n  }\n\n  cssText = cssText.replace(keyframesRegex, '');\n  var importRegex = /@import[\\s\\S]*?url\\([^)]*\\)[\\s\\S]*?;/gi; // to match css & media queries together\n\n  var combinedCSSRegex = '((\\\\s*?(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)?\\\\s*?@media[\\\\s\\\\S]' + '*?){([\\\\s\\\\S]*?)}\\\\s*?})|(([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)})'; // unified regex\n\n  var unifiedRegex = new RegExp(combinedCSSRegex, 'gi'); // eslint-disable-next-line no-constant-condition\n\n  while (true) {\n    var _matches = importRegex.exec(cssText);\n\n    if (_matches === null) {\n      _matches = unifiedRegex.exec(cssText);\n\n      if (_matches === null) {\n        break;\n      } else {\n        importRegex.lastIndex = unifiedRegex.lastIndex;\n      }\n    } else {\n      unifiedRegex.lastIndex = importRegex.lastIndex;\n    }\n\n    result.push(_matches[0]);\n  }\n\n  return result;\n}\n\nfunction getCSSRules(styleSheets) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var ret, deferreds;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            ret = [];\n            deferreds = []; // First loop inlines imports\n\n            styleSheets.forEach(function (sheet) {\n              if ('cssRules' in sheet) {\n                try {\n                  toArray(sheet.cssRules).forEach(function (item, index) {\n                    if (item.type === CSSRule.IMPORT_RULE) {\n                      var importIndex = index + 1;\n                      var url = item.href;\n                      var deferred = fetchCSS(url).then(function (metadata) {\n                        return metadata ? embedFonts(metadata) : '';\n                      }).then(function (cssText) {\n                        return parseCSS(cssText).forEach(function (rule) {\n                          try {\n                            sheet.insertRule(rule, rule.startsWith('@import') ? importIndex += 1 : sheet.cssRules.length);\n                          } catch (error) {\n                            console.error('Error inserting rule from remote css', {\n                              rule: rule,\n                              error: error\n                            });\n                          }\n                        });\n                      }).catch(function (e) {\n                        console.error('Error loading remote css', e.toString());\n                      });\n                      deferreds.push(deferred);\n                    }\n                  });\n                } catch (e) {\n                  var inline = styleSheets.find(function (a) {\n                    return a.href == null;\n                  }) || document.styleSheets[0];\n\n                  if (sheet.href != null) {\n                    deferreds.push(fetchCSS(sheet.href).then(function (metadata) {\n                      return metadata ? embedFonts(metadata) : '';\n                    }).then(function (cssText) {\n                      return parseCSS(cssText).forEach(function (rule) {\n                        inline.insertRule(rule, sheet.cssRules.length);\n                      });\n                    }).catch(function (err) {\n                      console.error('Error loading remote stylesheet', err.toString());\n                    }));\n                  }\n\n                  console.error('Error inlining remote css file', e.toString());\n                }\n              }\n            });\n            return _context2.abrupt(\"return\", Promise.all(deferreds).then(function () {\n              // Second loop parses rules\n              styleSheets.forEach(function (sheet) {\n                if ('cssRules' in sheet) {\n                  try {\n                    toArray(sheet.cssRules).forEach(function (item) {\n                      ret.push(item);\n                    });\n                  } catch (e) {\n                    console.error(\"Error while reading CSS rules from \".concat(sheet.href), e.toString());\n                  }\n                }\n              });\n              return ret;\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nfunction getWebFontRules(cssRules) {\n  return cssRules.filter(function (rule) {\n    return rule.type === CSSRule.FONT_FACE_RULE;\n  }).filter(function (rule) {\n    return shouldEmbed(rule.style.getPropertyValue('src'));\n  });\n}\n\nfunction parseWebFontRules(node) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n              if (node.ownerDocument == null) {\n                reject(new Error('Provided element is not within a Document'));\n              }\n\n              resolve(toArray(node.ownerDocument.styleSheets));\n            }).then(function (styleSheets) {\n              return getCSSRules(styleSheets);\n            }).then(getWebFontRules));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\n\nexport function getWebFontCSS(node, options) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", parseWebFontRules(node).then(function (rules) {\n              return Promise.all(rules.map(function (rule) {\n                var baseUrl = rule.parentStyleSheet ? rule.parentStyleSheet.href : null;\n                return embedResources(rule.cssText, baseUrl, options);\n              }));\n            }).then(function (cssTexts) {\n              return cssTexts.join('\\n');\n            }));\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n}\nexport function embedWebFonts(clonedNode, options) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", (options.fontEmbedCSS != null ? Promise.resolve(options.fontEmbedCSS) : getWebFontCSS(clonedNode, options)).then(function (cssText) {\n              var styleNode = document.createElement('style');\n              var sytleContent = document.createTextNode(cssText);\n              styleNode.appendChild(sytleContent);\n\n              if (clonedNode.firstChild) {\n                clonedNode.insertBefore(styleNode, clonedNode.firstChild);\n              } else {\n                clonedNode.appendChild(styleNode);\n              }\n\n              return clonedNode;\n            }));\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n}","map":{"version":3,"mappings":"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","names":["toArray","shouldEmbed","embedResources","cssFetchCache","fetchCSS","url","cache","deferred","window","fetch","then","res","cssText","text","embedFonts","meta","raw","regexUrl","fontLocs","match","loadFonts","map","location","replace","startsWith","URL","href","blob","Promise","resolve","reject","reader","FileReader","onloadend","result","onerror","readAsDataURL","all","parseCSS","source","commentsRegex","keyframesRegex","RegExp","matches","exec","push","importRegex","combinedCSSRegex","unifiedRegex","lastIndex","getCSSRules","styleSheets","ret","deferreds","forEach","sheet","cssRules","item","index","type","CSSRule","IMPORT_RULE","importIndex","metadata","rule","insertRule","length","error","console","catch","e","toString","inline","find","a","document","err","getWebFontRules","filter","FONT_FACE_RULE","style","getPropertyValue","parseWebFontRules","node","ownerDocument","Error","getWebFontCSS","options","rules","baseUrl","parentStyleSheet","cssTexts","join","embedWebFonts","clonedNode","fontEmbedCSS","styleNode","createElement","sytleContent","createTextNode","appendChild","firstChild","insertBefore"],"sources":["../src/embedWebFonts.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}